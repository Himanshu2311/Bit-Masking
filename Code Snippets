#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define tez ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define f(i,a,b) for(ll i=a;i<b;i++)
#define ef(i,a,b) for(ll i=a;i<=b;i++)
#define rf(i,a,b) for(ll i=a;i>=b;i--)
#define eb emplace_back
#define mp make_pair
#define INF 0x3f3f3f3f
#define vi vector<pair<ll,ll>>
#define ff first
#define ss second
#define mi map<ll,ll>
bool isOdd(ll n)
{
    return n&1?true:false;
}
bool isEven(ll n)
{
    return n&1?false:true;
}
bool isSet(ll n,int i)
{
    return (n&(1<<i)?1:0);
}
void setBit(ll &n,int i)
{
    n|=(1<<i);
}
void clearBit(ll &n,int i)
{
    return n&(~(1<<i));
}
//~0==-1
void clearRange(ll &n,int j,int i)
{
    //j>i
    ll mask1,mask2,mask;
    mask1=(-1<<(j+1));
    mask2=(1<<i)-1;
    mask=mask1|mask2;
    n=n&mask;
}
void clearLast_i_Bits(ll &n,int i)
{
    ll mask=(-1<<i);
    n=n&mask;
}
ll replaceBits(ll n,ll m,int l,int r)
{
    ll mask1=-1<<(l+1);
    ll mask2=(1<<r)-1;
    ll mask=mask1|mask2;
    n=n&mask;
    n=n|(m<<r);
    return n;
}
ll countSetBits1(ll n)
{
    ll ans=0;
    while(n)
    {
        n=n&(n-1);
        ans++;
    }
    return ans;
}
ll countSetBits2(ll n)
{
    ll ans=0;
    while(n>0)
    {
        if(n&1)
            ans++;
        n>>=1;
    }
    return ans;
}
void decimalToBinary(ll n)
{
    ll lastBit=0,ans=0,p=1;
    while(n)
    {
        lastBit=n&1;
        ans+=p*ans;
        p=p*10;
        n>>1;
    }
    cout<<ans;
}
ll binaryExponentiation(ll n,ll m)
{
    ll ans=1;
    while(n)
    {
        if(n&1)
        {
            ans*=a;
        }
        a=a*a;
        n>>=1;
    }
    return ans;
}
